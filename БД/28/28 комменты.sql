--1 --Вывести информацию обо всех депо, имеющих свободные электрифицированные пути.
SELECT ДЕПО.* /* Звездочка позволяет вывести все данные 
из таблицы Депо*/
/*INNER JOIN формирует таблицу из записей двух таблиц. Каждая строка из первой таблицы, сопоставляется с каждой строкой из второй таблицы,
после чего происходит проверка условия. Если условие истинно, то строки попадают в результирующую таблицу.*/
FROM ДЕПО INNER JOIN Пути ON Пути.номер_депо = ДЕПО.номер_депо 
--условие
WHERE путь_свободен = 1 AND путь_электрифицирован = 1

--2 --Вывести информацию обо всех свободных путях длиной более 100 м, находящихся в Краснопресненском трамвайном депо.
SELECT Пути.* /* Звездочка позволяет вывести все данные 
из таблицы Депо*/
FROM ДЕПО INNER JOIN Пути ON Пути.номер_депо = ДЕПО.номер_депо 
/*INNER JOIN формирует таблицу из записей двух таблиц. Каждая строка из первой таблицы, сопоставляется с каждой строкой из второй таблицы,
после чего происходит проверка условия. Если условие истинно, то строки попадают в результирующую таблицу.*/
WHERE путь_свободен = 1 AND Депо.Название LIKE '%Краснопресненское Трамвайное Депо%' AND длина_пути_км > 100 and путь_свободен = 1
--по условию Название должно включать 

--3 --Создать таблицу, содержащую данные 1 запроса с указанием информации о путях в этих депо
SELECT ДЕПО.*,название_пути,номер_пути, длина_пути_км ,путь_свободен ,путь_электрифицирован --выбираем необходимые по заданию данные
-- Вносим данные в созданнную таблицу
INTO Новая_таблица
FROM ДЕПО INNER JOIN Пути ON Пути.номер_депо = ДЕПО.номер_депо 
WHERE путь_свободен = 1 AND путь_электрифицирован = 1
-- условие первого запроса

--4 -- Добавить в созданную таблицу депо, в которых нет ни одного пути для ремонта трамваев.
INSERT Новая_таблица -- добавляем строки в уже созданную таблицу
-- указываем столбцы которые будут включены в нашу выборку
SELECT Депо.*, название_пути, номер_пути, длина_пути_км, путь_свободен, путь_электрифицирован
FROM Депо INNER JOIN Пути ON Пути.номер_депо = ДЕПО.номер_депо
WHERE Пути.Номер_депо = Депо.Номер_депо AND Пути.название_пути LIKE '%для ремонта%'
-- делаем проверку по первичным ключам на наличие этих данных в созданной таблице, чтобы одни и те же значения не добавлялись каждый раз
AND NOT EXISTS (SELECT Новая_таблица.Номер_депо, Новая_таблица.номер_пути FROM Новая_таблица
WHERE Новая_таблица.номер_пути = Пути.номер_пути AND
Новая_таблица.Номер_депо = Пути.Номер_депо)

--5 --В созданной таблице поменять местами количества парковочных и ремонтных мест во всех депо.
-- обновляем строки созданной таблицы
UPDATE Новая_таблица 
/* устанавливая новые значения по заданию и
меняем местами количество парковочных и ремонтных мест во всех депо*/
SET Количество_парковочных_мест = Количество_ремонтных_мест, Количество_ремонтных_мест = Количество_парковочных_мест

--6 --Удалить из созданной таблицы все депо, имеющие свободные пути.
-- удаляем строки из созданной таблицы 
DELETE Новая_таблица 
-- там где путь свободен
WHERE путь_свободен = 1

--7 --Посчитать количество путей и среднюю длину пути для каждого депо.
SELECT номер_депо, COUNT(номер_пути) AS количество_путей, --функция count возвращает количество элементов, найденных в столбце номер пути как количество путей
AVG(длина_пути_км)AS длина_пути_средня -- AVG выводит среднее арифметическое длины пути как длина пути средняя 
-- выбираем из таблицы пути
FROM Пути
-- делаем группировку по номеру депо
GROUP BY номер_депо